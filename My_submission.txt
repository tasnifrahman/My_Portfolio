	In the name of Allah the merciful.

cisco: 1234567@tasnifS
my: 123456tasnif
varsity: 1234567tasnif
pc: 1234tasnif
router: 110110111111100011110
microsoft account: 1802014@tasnif#99$

hackerearth: tasnifsimanto99@gmail.com
password: 1234tasnif




363B (Fence)

#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n, k, sum=0, m=0;
    cin>>n>>k;
    int c=k-1;
    int arr[n];
    for(int i=0; i<n; i++)
    {
        cin>>arr[i];
    }
    for(int i=0; i<k; i++)
    {
        sum+=arr[i];
    }
    m = sum;
    for(int i=k; i<n; i++)
    {
        m = m+arr[i]-arr[i-k];
        if(m < sum)
        {
            m = sum;
            c=i;
        }
    }
    cout<<(c-k)+2<<endl;
    return 0;
}



270A - Fancy Fence 


#include <bits/stdc++.h>
using namespace std;
int main()
{
    int n, t;
    cin>>n;
    while(n--)
    {
        cin>>t;
        if(360 % (180-t)==0) cout<<"YES"<<endl;
        else cout<<"NO"<<endl;
    }
    return 0;
}



456A - Laptops 

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n, c=0;
    cin>>n;
    pair<int, int> arr[n];
    for(int i = 0; i < n; i++) {
        int a,b;
        cin>>a>>b;
        arr[i] = make_pair(a, b);
    }
    sort(arr, arr + n);

    for(int i=0; i<n-1; i++)
    {
        if(arr[i].second >  arr[i+1].second)
        {
            cout<<"Happy Alex\n";
            c=1;
            break;
        }
    }
    if(c==0) cout<<"Poor Alex\n";
    return 0;
}


Traveling Salesman Problem

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n;
    cin>>n;
    while(n--)
    {
        int t;
        cin>>t;
        int x, y, a=0, b=0, c=0, d=0;
        while(t--)
        {
            cin>>x>>y;
            a=min(a, x);
            b=max(b, x);
            c=min(c, y);
            d=max(d, y);
        }
        cout<<(abs(a)+b+abs(c)+d)*2<<endl;
    }
    return 0;
}



Insert character at specific position in string

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int n, i=1;
    cin>>n;
    while(n--)
    {
        string s, s2="s";
        cin>>s;
        if(s[4] != 's')
        {
            s.insert(4, s2);
        }
        cout<<"Case"<<" "<<i<<": "<<s<<"\n";
        i++;
    }

    return 0;
}

String task

#include<bits/stdc++.h>
using namespace std;
bool isVowel(char c)
{
    return (c=='a' || c=='e' || c=='i' || c=='o' || c=='u' || c=='y');
}
int main()
{
    string s, ans;
    cin>>s;
    for(auto u:s)
    {
        char c=tolower(u);
        if(isVowel(c) == 0)
        {
            ans+='.';
            ans+=c;
        }
    }
    cout<<ans;

    return 0;
}

palindrome or not

#include<bits/stdc++.h>
using namespace std;
int main()
{
    string s, ans;
    cin>>s;
    ans=s;
    reverse(ans.begin(), ans.end());
    if(s==ans)
        cout<<"Palindrome\n";
    else cout<<"not palindrome\n";

    return 0;
}

Sum of digits is palindrome?

#include<bits/stdc++.h>
using namespace std;
int main()
{
    int sum=0;
    string s, str, tmp;
    cin>>s;
    for(auto u:s)
    {
        sum+=(u-'0');
    }
    str = to_string(sum);
    tmp= str;
    reverse(tmp.begin(), tmp.end());
    if(str == tmp) cout<<"YES\n";
    else cout<<"NO\n";

    return 0;
}


Subarray Sum(GFG)

int ptr1=0, ptr2=0;
        long long sum=arr[0];
        if(s==0) return {-1};
        if(sum == s) return {1, 1};
        while(ptr2<n-1)
        {
            if(sum+arr[ptr2+1] <= s)
            {
                sum+=arr[ptr2+1];
                ptr2++;
            }
            else
            {
                sum-=arr[ptr1];
                ptr1++;
            }
            if(sum==s) return {ptr1+1, ptr2+1};
        }
        
        return {-1};


Minimum Jumps(GFG)

 int minJumps(int arr[], int n){
        // Your code here
        
        int maxStep=arr[0], steps=arr[0], jumps=1;
        if(n<=1) return 0;
        if(arr[0] == 0) return -1;
        int i=1;
        while(i<n)
        {
            if(i==n-1) return jumps;
            maxStep=max(maxStep, i+arr[i]);
            steps--;
            if(steps==0)
            {
                jumps++;
                if(maxStep == i)
                {
                    return -1;
                }
                steps=maxStep-i;
            }
            i++;
        }
        return 0;
    }
};

Counting elements in two arrays(GFG)

vector<int> countEleLessThanOrEqual(int arr1[], int arr2[], 
                                 int m, int n)
    {
    //Your code goes here
        sort(arr2, arr2+n);
        vector<int> a(m);
      
        for(int i=0; i<m; i++)
        {
            a[i] = upper_bound(arr2, arr2+n, arr1[i])-arr2;
        }
        return a;
    }



E. Binary Inversions 

#include<bits/stdc++.h>
using namespace std;
using ll = long long;
ll  calc(vector<int> &a)
{
    ll z=0, ans=0;
    for(int i=(int)a.size()-1; i>=0; i--)
    {
        if(a[i] == 0) z++;
        else ans+=z;
    }
    return ans;
}
int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        ll n, c;
        cin>>n;
        vector<int> v;
        vector<int> v1;
        vector<int> v2;
        for(int i=0; i<n; i++)
        {
            int x;
            cin>>x;
            v.push_back(x);
        }
        c = calc(v);
        //for vector 1
        for(int i=0; i<n; i++)
        {
            if(v[i] == 0)
            {
                v[i]=1;
                c=max(c, calc(v));
                v[i]=0;
                break;
            }
        }

        //for vector 2
        for(int i=n-1; i>=0; i--)
        {
            if(v[i] == 1)
            {
                v[i] = 0;
                c = max(c, calc(v));
                break;
            }
        }
        cout<<c<<endl;
    }
    return 0;
}
